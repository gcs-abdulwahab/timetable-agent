generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                     Int               @id @default(autoincrement())
  name                   String
  shortName              String
  offersBSDegree         Boolean
  bsSemesterAvailability Json?
  teachers               Teacher[]
  subjects               Subject[]
  rooms                  Room[]
  timetableEntries       TimetableEntry[]
}

model Teacher {
  id                Int               @id @default(autoincrement())
  name              String
  shortName         String
  designation       String?
  departmentId      Int
  department        Department        @relation(fields: [departmentId], references: [id])
  timetableEntries  TimetableEntry[]
}

model Semester {
  id                Int               @id @default(autoincrement())
  name              String
  code              String?
  year              Int?
  term              String?
  isActive          Boolean           @default(false)
  startDate         DateTime?
  endDate           DateTime?
  subjects          Subject[]
  timetableEntries  TimetableEntry[]
}

model Subject {
  id                Int               @id @default(autoincrement())
  name              String
  code              String
  creditHours       Int
  color             String
  departmentId      Int
  semesterLevel     Int
  isCore            Boolean           @default(false)
  semesterId        Int?
  department        Department        @relation(fields: [departmentId], references: [id])
  semester          Semester?         @relation(fields: [semesterId], references: [id])
  timetableEntries  TimetableEntry[]
}

model Room {
  id                          Int               @id @default(autoincrement())
  name                        String
  capacity                    Int
  type                        String
  building                    String?
  floor                       Int?
  hasProjector                Boolean?
  hasAC                       Boolean?
  description                 String?  
  primaryDepartmentId         Int?
  availableForOtherDepartments Boolean?
  primaryDepartment           Department?      @relation(fields: [primaryDepartmentId], references: [id])
  timetableEntries            TimetableEntry[]
}

model TimeSlot {
  id                Int               @id @default(autoincrement())
  start             DateTime
  end               DateTime
  period            Int
  timetableEntries  TimetableEntry[]
}

model Day {
  id                Int               @id @default(autoincrement()) 
  name              String
  shortName         String
  dayCode           Int               @unique
  isActive          Boolean
  workingHours      String
  timetableEntries  TimetableEntry[]
}

model TimetableEntry {
  id                Int               @id @default(autoincrement())
  subjectId         Int
  teacherId         Int
  timeSlotId        Int
  dayId             Int
  roomId            Int
  semesterId        Int
  departmentId      Int

  subject           Subject           @relation(fields: [subjectId], references: [id])
  teacher           Teacher           @relation(fields: [teacherId], references: [id])
  timeSlot          TimeSlot          @relation(fields: [timeSlotId], references: [id])
  day               Day               @relation(fields: [dayId], references: [id])
  room              Room              @relation(fields: [roomId], references: [id])
  semester          Semester          @relation(fields: [semesterId], references: [id])
  department        Department        @relation(fields: [departmentId], references: [id])
}
