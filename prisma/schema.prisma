generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                     Int               @id @default(autoincrement())
  name                   String
  shortName              String
  offersBSDegree         Boolean
  teachers               Teacher[]
  subjects               Subject[]
  rooms                  Room[]  
}

model Teacher {
  id                Int               @id @default(autoincrement())
  name              String
  shortName         String
  designation       String?
  departmentId      Int
  department        Department        @relation(fields: [departmentId], references: [id])
  timetableEntries  TimetableEntry[]
}

model Semester {
  id                Int               @id @default(autoincrement())
  name              String
  code              String?
  year              Int?
  term              String?
  isActive          Boolean           @default(false)
  startDate         DateTime?
  endDate           DateTime?
  subjects          Subject[]
}

model Subject {
  id                Int               @id @default(autoincrement())
  name              String
  code              String
  creditHours       Int  
  departmentId      Int  
  isCore            Boolean           @default(false)
  semesterId        Int?
  department        Department        @relation(fields: [departmentId], references: [id])
  semester          Semester?         @relation(fields: [semesterId], references: [id])
  timetableEntries  TimetableEntry[]
  subjectDepartments Int[]
}
model Room {
  id                          Int               @id @default(autoincrement())
  name                        String
  capacity                    Int
  type                        String
  building                    String?
  floor                       Int?
  hasProjector                Boolean?
  hasAC                       Boolean?
  description                 String?  
  primaryDepartmentId         Int?
  availableForOtherDepartments Boolean?
  primaryDepartment           Department?      @relation(fields: [primaryDepartmentId], references: [id])
  timetableEntries            TimetableEntry[]
}

model TimeSlot {
  id                Int               @id @default(autoincrement())
  start             String
  end               String
  period            Int
  timetableEntries  TimetableEntry[]
}

model Day {
  id                Int               @id @default(autoincrement()) 
  name              String
  shortName         String
  dayCode           Int               @unique
  isActive          Boolean
  
}
model TimetableEntry {
  id          Int       @id @default(autoincrement())
  subjectId   Int
  teacherId   Int?
  timeSlotId  Int
  roomId      Int
  dayIds      Int[]     // Array of integers instead of single dayId

  subject     Subject    @relation(fields: [subjectId], references: [id])
  teacher     Teacher?   @relation(fields: [teacherId], references: [id])
  timeSlot    TimeSlot   @relation(fields: [timeSlotId], references: [id])
  room        Room       @relation(fields: [roomId], references: [id])
}
